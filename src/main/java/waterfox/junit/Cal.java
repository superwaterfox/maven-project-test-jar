package waterfox.junit;

/**
 * 设计模式的思想： 
 * 1.新功能要 多扩展，少修改。(例如迟到的人，老员工和新员工，那么推崇 弹性制工作时间，补全8个小时就可以了。在不修改原来功能的状态下，扩展更多的可能性)
 * 2.模块与模块之间的连接，需要的是抽象的连接，而不是细节的依赖。(例如多个牌子的电脑插件之间的配合使用)
 * 使用面对对象的三大特性进行写代码
 * 	1.效果：可维护 可复用 可扩展 灵活性好
 * 	2.效果：拆分功能，避免重复,分别维护
 * 
 * 技术实现：
 * 封装：将功能进行拆分解耦：  两个类，一个运算类，一个平台的展现类--解决功能的拥挤
 * 继承：将运算类（两个参数，一个操作符和一个结果）进行抽象成主类，然后通过继承主类实现各自的返回结果方法--解决了如果添加功能，不会影响到其他模块
 * 		搭配工厂类:父类	多态实现多个实现子类Object，然后通过判断返回子类--封装了流程
 * 		策略模式: 抽象类	多态实现多个实现类的method，然后通过判断返回子类，使用各自的method进行合作使用--封装了变化	
 * 		装饰者模式： 人和衣服。同一个对象，进行不同method的使用	
 * 		代理模式：真实对象的间接代表执行者
 * 		原型模式：保存对象某一个状态的对象，而不用重复赋值和new。利用java的cloneable的clone功能
 * 多态 : 以上的类进行继承或者实现
 * 
 * 
 * 
 * @author ch
 *
 */
public class Cal implements Cloneable {
	public static void main(String[] args) throws CloneNotSupportedException {
		System.out.println(new Cal().clone() == new Cal());
	}
}
